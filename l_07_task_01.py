# Урок 7, задача №1

# Отсортируйте по убыванию методом пузырька
# одномерный целочисленный массив, заданный случайными числами
# на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# ● алгоритм сортировки должен быть в виде функции,
# которая принимает на вход массив данных,
# ● постарайтесь сделать алгоритм умнее, но помните,
# что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.


import random

SIZE = 10
MIN_ITEM = -100
MAX_ITEM = 99
array = [random.randint(MIN_ITEM, MAX_ITEM) for _ in range(SIZE)]

n = 0

print(array)


def bubble_sort_desc(arr):
    global n
    n = 1
    change = True
    while n < len(arr):
        if not change:
            break
        change = False
        for i in range(len(arr) - 1):
            if arr[i] < arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                change = True
        n += 1
    return arr


print(bubble_sort_desc(array))
print(f'Массив отсортирован за {n} проходов')

# Алгоритм оптимизирован следующим образом: если при прохождении внутреннего цикла
# не было выполнено ни одной перестановки, то следовательно, массив уже отсортирован,
# и алгоритм сортировки завершается. За счет этого сокращается количество итераций
# по массиву и время выполнения сортировки.
